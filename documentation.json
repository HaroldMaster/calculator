{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "AppService",
            "id": "injectable-AppService-99d8928cfa0d759ae5f9e71b0924f6f5",
            "file": "src/app/app.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "OperationsService",
            "id": "injectable-OperationsService-417a5517c55d9c483f7c33d0c5c39ed8",
            "file": "src/app/core/operations.service.ts",
            "properties": [
                {
                    "name": "numberAndOperationButtons",
                    "defaultValue": "{\n    [KeyPosition.AC]: 'AC',\n    [KeyPosition.seven]: '7',\n    [KeyPosition.three]: '3',\n    [KeyPosition.two]: '2',\n    [KeyPosition.one]: '1',\n    [KeyPosition.equal]: '=',\n    [KeyPosition.zero]: '0',\n    [KeyPosition.plus]: '+',\n    [KeyPosition.less]: '-',\n    [KeyPosition.eight]: '8',\n    [KeyPosition.nine]: '9',\n    [KeyPosition.percent]: '%',\n    [KeyPosition.four]: '4',\n    [KeyPosition.five]: '5',\n    [KeyPosition.six]: '6',\n    [KeyPosition.asterisk]: '*',\n  }",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "numberScreen",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "resultOnScreen",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "SCREEN_MAX_LENGTH",
                    "defaultValue": "6",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "appendNewOperation",
                    "args": [
                        {
                            "name": "position",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 119,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeScreen",
                    "args": [
                        {
                            "name": "position",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "errorHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 123,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "newOperation",
                    "args": [
                        {
                            "name": "position",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newOperationAfterError",
                    "args": [
                        {
                            "name": "position",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 142,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetScreen",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "resolveOperation",
                    "args": [
                        {
                            "name": "expression",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "expression",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restoreAfterResult",
                    "args": [
                        {
                            "name": "position",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 100,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ButtonType } from '../medium-button/medium-button.model';\nimport { ScreenValue } from '../number-box/number-box-model';\nimport { KeyPosition } from '../core/operation.model';\n@Injectable({\n  providedIn: 'root',\n})\nexport class OperationsService {\n  private SCREEN_MAX_LENGTH: number = 6;\n  constructor() {}\n  numberAndOperationButtons: { [key: number]: string } = {\n    [KeyPosition.AC]: 'AC',\n    [KeyPosition.seven]: '7',\n    [KeyPosition.three]: '3',\n    [KeyPosition.two]: '2',\n    [KeyPosition.one]: '1',\n    [KeyPosition.equal]: '=',\n    [KeyPosition.zero]: '0',\n    [KeyPosition.plus]: '+',\n    [KeyPosition.less]: '-',\n    [KeyPosition.eight]: '8',\n    [KeyPosition.nine]: '9',\n    [KeyPosition.percent]: '%',\n    [KeyPosition.four]: '4',\n    [KeyPosition.five]: '5',\n    [KeyPosition.six]: '6',\n    [KeyPosition.asterisk]: '*',\n  };\n\n  resultOnScreen: boolean = false;\n  numberScreen: string = '';\n  changeScreen(position: number): string {\n    console.log(position); //?\n    console.log(this.resultOnScreen);\n    position = this.restoreAfterResult(position);\n\n    if (this.resultOnScreen) {\n      console.log('aqui');\n\n      switch (position) {\n        case ButtonType.AC:\n          this.numberScreen = this.resetScreen();\n          return this.numberScreen;\n        case ButtonType.asterisk:\n        case ButtonType.less:\n        case ButtonType.plus:\n        case ButtonType.percent:\n          this.numberScreen = this.appendNewOperation(position);\n          this.resultOnScreen = false;\n          return this.numberScreen;\n\n        default:\n          this.numberScreen = this.numberAndOperationButtons[position];\n          this.resultOnScreen = false;\n          console.log(this.numberScreen);\n          return this.numberScreen;\n      }\n    }\n\n    switch (position) {\n      case ButtonType.AC:\n        this.numberScreen = ScreenValue.initialValue;\n        return this.numberScreen;\n      case ButtonType.Equal:\n        this.numberScreen = this.errorHandler();\n        console.log(this.resultOnScreen);\n        return this.numberScreen;\n      default:\n        this.resultOnScreen = false;\n        break;\n    }\n\n    if (\n      this.numberScreen === ScreenValue.error &&\n      position !== ButtonType.Equal\n    ) {\n      this.numberScreen = this.newOperationAfterError(position);\n      return this.numberScreen;\n    }\n\n    this.newOperation(position);\n\n    return this.numberScreen;\n  }\n\n  resolveOperation(expression: string): string {\n    let result='';\n    if (this.numberScreen != ScreenValue.error) {\n      result = eval(expression) + '';\n      this.resultOnScreen =true;\n      console.log(typeof result);\n      return result;\n    } else {\n      result = ScreenValue.initialValue;\n      this.resultOnScreen = false;\n      return result;\n    }\n  }\n\n  private restoreAfterResult(position: number) {\n    if (position == ButtonType.Equal && this.resultOnScreen == true) {\n      position = ButtonType.AC;\n    }\n    return position;\n  }\n\n  private newOperation(position: number) {\n    if (this.numberScreen.length <= this.SCREEN_MAX_LENGTH) {\n      if (this.numberScreen === ScreenValue.initialValue) {\n        this.numberScreen = this.numberAndOperationButtons[position] + '';\n      } else {\n        this.numberScreen += '' + this.numberAndOperationButtons[position];\n      }\n    }\n  }\n  private resetScreen(): string {\n    return ScreenValue.initialValue;\n  }\n  private appendNewOperation(position: number): string {\n    let append = this.numberScreen + this.numberAndOperationButtons[position];\n    return append;\n  }\n  private errorHandler(): string {\n    let screenValue = '';\n    if (this.numberScreen == ScreenValue.wrongOperation) {\n      screenValue = ScreenValue.error;\n      return screenValue;\n    } else {\n      try {\n        console.log(this.numberScreen)\n        screenValue = this.resolveOperation(this.numberScreen);\n        console.log(screenValue)\n      } catch (error) {\n        screenValue = ScreenValue.error;\n        this.resultOnScreen = false;\n        return screenValue;\n      }\n      return screenValue;\n    }\n  }\n\n  private newOperationAfterError(position: number): string {\n    let newOperation = this.numberAndOperationButtons[position] + '';\n    return newOperation;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-8b278d5df9ffe3356a43199512aa0be4",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "numberAndOperationButtons",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "screenValue",
                    "defaultValue": "'0'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "defaultValue": "'calculator'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "numberBox",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { OperationsService } from './core/operations.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'calculator';\n  screenValue : string = '0';\n  numberAndOperationButtons: {[key:number]:string}; \n\n  constructor(private operationsService: OperationsService) {\n    this.numberAndOperationButtons = this.operationsService.numberAndOperationButtons;\n  }\n\n  numberBox(value : number){\n    console.log({value});\n    this.screenValue = this.operationsService.changeScreen(value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "operationsService",
                        "type": "OperationsService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "operationsService",
                        "type": "OperationsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"calculator\">\r\n  <div class=\"calculator__base\">\r\n      <app-number-box [screenNumber] = \"screenValue\"></app-number-box>\r\n      <app-medium-button (buttonClick) = \"numberBox($event)\" [numberAndOperationButtons]=\"numberAndOperationButtons\" ></app-medium-button>\r\n  </div>\r\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "MediumButtonComponent",
            "id": "component-MediumButtonComponent-9005c43f2a2030a2d129b8b1b5629706",
            "file": "src/app/medium-button/medium-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medium-button",
            "styleUrls": [
                "./medium-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medium-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "numberAndOperationButtons",
                    "defaultValue": "{}",
                    "line": 17,
                    "type": "literal type"
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "emitBoxClick",
                    "args": [
                        {
                            "name": "position",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { ButtonType } from './medium-button.model';\n\n@Component({\n  selector: 'app-medium-button',\n  templateUrl: './medium-button.component.html',\n  styleUrls: ['./medium-button.component.scss']\n})\nexport class MediumButtonComponent implements OnInit {\n  @Input()\n  numberAndOperationButtons: {[key:number]:string} = {}\n  @Output() buttonClick: EventEmitter<any> = new EventEmitter();\n  constructor() {\n   }\n // @Input() numberKeyboard: number = 0;\n  \n   //position : number = 0;\n\n  buttonType = ButtonType;\n\n  ngOnInit(): void {\n  }\n  emitBoxClick(position:number): void {\n    this.buttonClick.emit(position);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: grid;\r\n    grid-template-columns: auto auto auto auto;\r\n    grid-gap: 10px;\r\n    padding: 10px;\r\n    width: 100%;\r\n    height: 70%;\r\n    \r\n    \r\n}",
                    "styleUrl": "./medium-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button (click)=\"emitBoxClick(+numberAndOperations.key)\" class=\"medium-button item{{+numberAndOperations.key}}\"  *ngFor=\"let numberAndOperations of numberAndOperationButtons | keyvalue  \">\n    <div  class=\"medium-button__number\" *ngIf=\"+numberAndOperations.key == buttonType.AC\">\n        {{ numberAndOperations.value }}       \n     </div>\n     <div  class=\"medium-button__number\" *ngIf=\"+numberAndOperations.key == buttonType.Equal\">\n        {{ numberAndOperations.value }}       \n     </div>\n    <div  class=\"medium-button__number\" *ngIf=\"+numberAndOperations.key != buttonType.AC && +numberAndOperations.key != buttonType.Equal \">\n        {{ numberAndOperations.value }}       \n     </div>\n\n     \n</button>"
        },
        {
            "name": "NumberBoxComponent",
            "id": "component-NumberBoxComponent-e52af31ed9b9244741b03b32eb2f2f33",
            "file": "src/app/number-box/number-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-number-box",
            "styleUrls": [
                "./number-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./number-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "screenNumber",
                    "defaultValue": "''",
                    "line": 18,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { MediumButtonComponent } from '../medium-button/medium-button.component';\nimport mediumButtonStories from '../medium-button/medium-button.stories';\n\n@Component({\n  selector: 'app-number-box',\n  templateUrl: './number-box.component.html',\n  styleUrls: ['./number-box.component.scss']\n})\nexport class NumberBoxComponent implements OnInit {\n  @Input() screenNumber: string = '';\n\n  constructor() {\n\n   }\n   \n  ngOnInit(): void {\n  }\n\n  \n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n    width: 100%;\r\n    height: 30%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}",
                    "styleUrl": "./number-box.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"number-box\">\n    <div class=\"number-box__screen\" >{{screenNumber}}</div>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 64,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "MediumButtonComponent"
                        },
                        {
                            "name": "NumberBoxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mediumButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/medium-button/medium-button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n      component: MediumButtonComponent,\r\n      props: {\r\n        numberAndOperationButtons : {\r\n          [KeyPosition.AC]: 'AC',\r\n          [KeyPosition.seven]: '7',\r\n          [KeyPosition.three]: '3',\r\n          [KeyPosition.two]: '2',\r\n          [KeyPosition.one]: '1',\r\n          [KeyPosition.equal]: '=',\r\n          [KeyPosition.zero]: '0',\r\n          [KeyPosition.plus]: '+',\r\n          [KeyPosition.less]: '-',\r\n          [KeyPosition.eight]: '8',\r\n          [KeyPosition.nine]: '9',\r\n          [KeyPosition.percent]: '%',\r\n          [KeyPosition.four]: '4',\r\n          [KeyPosition.five]: '5',\r\n          [KeyPosition.six]: '6',\r\n          [KeyPosition.asterisk]: '*',\r\n        }\r\n      },\r\n    })"
            },
            {
                "name": "mediumButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/number-box/number-box.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n      component: NumberBoxComponent,\r\n      props: {\r\n        screenNumber: 7\r\n      },\r\n    })"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ButtonType",
                "childs": [
                    {
                        "name": "AC",
                        "value": "0"
                    },
                    {
                        "name": "Equal",
                        "value": "5"
                    },
                    {
                        "name": "plus",
                        "value": "7"
                    },
                    {
                        "name": "less",
                        "value": "8"
                    },
                    {
                        "name": "percent",
                        "value": "12"
                    },
                    {
                        "name": "asterisk",
                        "value": "16"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/medium-button/medium-button.model.ts"
            },
            {
                "name": "KeyPosition",
                "childs": [
                    {
                        "name": "AC",
                        "value": "0"
                    },
                    {
                        "name": "seven",
                        "value": "1"
                    },
                    {
                        "name": "three",
                        "value": "2"
                    },
                    {
                        "name": "two",
                        "value": "3"
                    },
                    {
                        "name": "one",
                        "value": "4"
                    },
                    {
                        "name": "equal",
                        "value": "5"
                    },
                    {
                        "name": "zero",
                        "value": "6"
                    },
                    {
                        "name": "plus",
                        "value": "7"
                    },
                    {
                        "name": "less",
                        "value": "8"
                    },
                    {
                        "name": "eight",
                        "value": "10"
                    },
                    {
                        "name": "nine",
                        "value": "11"
                    },
                    {
                        "name": "percent",
                        "value": "12"
                    },
                    {
                        "name": "four",
                        "value": "13"
                    },
                    {
                        "name": "five",
                        "value": "14"
                    },
                    {
                        "name": "six",
                        "value": "15"
                    },
                    {
                        "name": "asterisk",
                        "value": "16"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/core/operation.model.ts"
            },
            {
                "name": "ScreenValue",
                "childs": [
                    {
                        "name": "initialValue",
                        "value": "0"
                    },
                    {
                        "name": "error",
                        "value": "Syntax error"
                    },
                    {
                        "name": "wrongOperation",
                        "value": "undefined"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/number-box/number-box-model.ts"
            }
        ],
        "groupedVariables": {
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/medium-button/medium-button.stories.ts": [
                {
                    "name": "mediumButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/medium-button/medium-button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n      component: MediumButtonComponent,\r\n      props: {\r\n        numberAndOperationButtons : {\r\n          [KeyPosition.AC]: 'AC',\r\n          [KeyPosition.seven]: '7',\r\n          [KeyPosition.three]: '3',\r\n          [KeyPosition.two]: '2',\r\n          [KeyPosition.one]: '1',\r\n          [KeyPosition.equal]: '=',\r\n          [KeyPosition.zero]: '0',\r\n          [KeyPosition.plus]: '+',\r\n          [KeyPosition.less]: '-',\r\n          [KeyPosition.eight]: '8',\r\n          [KeyPosition.nine]: '9',\r\n          [KeyPosition.percent]: '%',\r\n          [KeyPosition.four]: '4',\r\n          [KeyPosition.five]: '5',\r\n          [KeyPosition.six]: '6',\r\n          [KeyPosition.asterisk]: '*',\r\n        }\r\n      },\r\n    })"
                }
            ],
            "src/app/number-box/number-box.stories.ts": [
                {
                    "name": "mediumButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/number-box/number-box.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n      component: NumberBoxComponent,\r\n      props: {\r\n        screenNumber: 7\r\n      },\r\n    })"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/medium-button/medium-button.model.ts": [
                {
                    "name": "ButtonType",
                    "childs": [
                        {
                            "name": "AC",
                            "value": "0"
                        },
                        {
                            "name": "Equal",
                            "value": "5"
                        },
                        {
                            "name": "plus",
                            "value": "7"
                        },
                        {
                            "name": "less",
                            "value": "8"
                        },
                        {
                            "name": "percent",
                            "value": "12"
                        },
                        {
                            "name": "asterisk",
                            "value": "16"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/medium-button/medium-button.model.ts"
                }
            ],
            "src/app/core/operation.model.ts": [
                {
                    "name": "KeyPosition",
                    "childs": [
                        {
                            "name": "AC",
                            "value": "0"
                        },
                        {
                            "name": "seven",
                            "value": "1"
                        },
                        {
                            "name": "three",
                            "value": "2"
                        },
                        {
                            "name": "two",
                            "value": "3"
                        },
                        {
                            "name": "one",
                            "value": "4"
                        },
                        {
                            "name": "equal",
                            "value": "5"
                        },
                        {
                            "name": "zero",
                            "value": "6"
                        },
                        {
                            "name": "plus",
                            "value": "7"
                        },
                        {
                            "name": "less",
                            "value": "8"
                        },
                        {
                            "name": "eight",
                            "value": "10"
                        },
                        {
                            "name": "nine",
                            "value": "11"
                        },
                        {
                            "name": "percent",
                            "value": "12"
                        },
                        {
                            "name": "four",
                            "value": "13"
                        },
                        {
                            "name": "five",
                            "value": "14"
                        },
                        {
                            "name": "six",
                            "value": "15"
                        },
                        {
                            "name": "asterisk",
                            "value": "16"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/core/operation.model.ts"
                }
            ],
            "src/app/number-box/number-box-model.ts": [
                {
                    "name": "ScreenValue",
                    "childs": [
                        {
                            "name": "initialValue",
                            "value": "0"
                        },
                        {
                            "name": "error",
                            "value": "Syntax error"
                        },
                        {
                            "name": "wrongOperation",
                            "value": "undefined"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/number-box/number-box-model.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/operations.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OperationsService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/medium-button/medium-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediumButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/medium-button/medium-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mediumButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/number-box/number-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumberBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/number-box/number-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mediumButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}